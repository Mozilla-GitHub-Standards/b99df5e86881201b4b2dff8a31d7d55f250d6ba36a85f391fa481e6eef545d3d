@import '../bower_components/brick-common/styles/mixins'
@import '../bower_components/brick-common/styles/params'

// todo: vendor prefixes

$1 = { name: s, breakpoint: 768px }
$2 = { name: m, breakpoint: 992px }
$3 = { name: l, breakpoint: 1200px }

/**
 * example:
 *  & > [horizontal-min-$1-3] { mixin() }
 * would be created by:
 * responsify("& > ", horizontal, min, mixin)
 */
responsify(selector, attr, minmax, content) {
  for $breakpoint in $1 $2 $3 {
    {selector}[{attr}-{minmax}-{$breakpoint.name}] {
      @media ({minmax}-width: $breakpoint.breakpoint) {
        content();
      }
    }
  }
  {selector}[{attr}] {
    content();
  }
}

brick-layout {

  display: flex;
  overflow: hidden;
  box-sizing: border-box;
  box-orient: vertical;
  flex-direction: column;
  position: relative;

  /**
   * Horizontal Layout
   *--------------------------------------------------*/
  _horizontal() {
    box-orient: horizontal;
    flex-direction: row;
  }
  responsify("&", horizontal, min, _horizontal);

  /**
   *  Flex-children
   *--------------------------------------------------*/
  _flex() {
    flex: 1;
    overflow: auto;
  }
  responsify("& > ", flex, min, _flex)

  /**
   *  Drawer
   *--------------------------------------------------*/
  _drawer() {
    height: 100%;
    position: absolute;
    transform: translate(-100%,0);
    transition: transform .2s ease;
  }
  responsify("& > ", drawer, max, _drawer)
  // show state
  &[open] {
    & > [drawer],
    & > [drawer-max-{$1.name}],
    & > [drawer-max-{$2.name}],
    & > [drawer-max-{$3.name}] {
      transform: translate(0,0);
    }
  }

  _drawertop() {
    position: absolute;
    transform: translate(0,-100%);
    transition: transform .2s ease;
    width: 100%;
  }
  responsify("& > ", drawer-top, max, _drawertop)
  &[open] {
    & > [drawer-top],
    & > [drawer-top-max-{$1.name}],
    & > [drawer-top-max-{$2.name}],
    & > [drawer-top-max-{$3.name}] {
      transform: translate(0,0);
    }
  }
}
